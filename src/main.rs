use clap::{Parser, Subcommand};

// Include the built information generated by build.rs
mod built_info {
    include!(concat!(env!("OUT_DIR"), "/built.rs"));
}

fn get_version() -> String {
    #[cfg(debug_assertions)]
    {
        // For debug builds, use git commit ID from build-time information
        if let Some(commit_version) = built_info::GIT_VERSION {
            format!("Development build (commit: {commit_version})")
        } else if let Some(commit_short) = built_info::GIT_COMMIT_HASH_SHORT {
            format!("Development build (short commit: {commit_short})")
        } else {
            "Development build (unknown commit)".to_string()
        }
    }

    #[cfg(not(debug_assertions))]
    {
        // For release builds, use the package version
        format!("Version {}", built_info::PKG_VERSION)
    }
}

#[derive(Parser)]
#[command(name = "RNAS", arg_required_else_help = true)]
#[command(about = "A unified solution for your Network Attached Storage systems", long_about = None)]
struct Cli {
    #[command(subcommand)]
    command: Option<Commands>,
}

#[derive(Subcommand)]
enum Commands {
    /// Display version information
    Version,
}

fn main() {
    let cli = Cli::parse();

    match cli.command {
        Some(Commands::Version) => {
            println!("{}", get_version());
        }
        None => {}
    }
}
